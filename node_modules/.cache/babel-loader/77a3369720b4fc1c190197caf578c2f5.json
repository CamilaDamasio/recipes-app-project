{"ast":null,"code":"/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\n/* global DOMException */\nmodule.exports = clipboardCopy;\n\nfunction clipboardCopy(text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text).catch(function (err) {\n      throw err !== undefined ? err : new DOMException('The request is not allowed', 'NotAllowedError');\n    });\n  } // ...Otherwise, use document.execCommand() fallback\n  // Put the text to copy into a <span>\n\n\n  var span = document.createElement('span');\n  span.textContent = text; // Preserve consecutive spaces and newlines\n\n  span.style.whiteSpace = 'pre';\n  span.style.webkitUserSelect = 'auto';\n  span.style.userSelect = 'all'; // Add the <span> to the page\n\n  document.body.appendChild(span); // Make a selection object representing the range of text selected by the user\n\n  var selection = window.getSelection();\n  var range = window.document.createRange();\n  selection.removeAllRanges();\n  range.selectNode(span);\n  selection.addRange(range); // Copy text to the clipboard\n\n  var success = false;\n\n  try {\n    success = window.document.execCommand('copy');\n  } catch (err) {\n    console.log('error', err);\n  } // Cleanup\n\n\n  selection.removeAllRanges();\n  window.document.body.removeChild(span);\n  return success ? Promise.resolve() : Promise.reject(new DOMException('The request is not allowed', 'NotAllowedError'));\n}","map":{"version":3,"sources":["/home/camila/Documentos/github_projetos/recipes-app-project/node_modules/clipboard-copy/index.js"],"names":["module","exports","clipboardCopy","text","navigator","clipboard","writeText","catch","err","undefined","DOMException","span","document","createElement","textContent","style","whiteSpace","webkitUserSelect","userSelect","body","appendChild","selection","window","getSelection","range","createRange","removeAllRanges","selectNode","addRange","success","execCommand","console","log","removeChild","Promise","resolve","reject"],"mappings":"AAAA;;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiBC,aAAjB;;AAEA,SAASA,aAAT,CAAwBC,IAAxB,EAA8B;AAC5B;AACA;AACA,MAAIC,SAAS,CAACC,SAAd,EAAyB;AACvB,WAAOD,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BH,IAA9B,EAAoCI,KAApC,CAA0C,UAAUC,GAAV,EAAe;AAC9D,YAAOA,GAAG,KAAKC,SAAR,GAAoBD,GAApB,GAA0B,IAAIE,YAAJ,CAAiB,4BAAjB,EAA+C,iBAA/C,CAAjC;AACD,KAFM,CAAP;AAGD,GAP2B,CAS5B;AAEA;;;AACA,MAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAX;AACAF,EAAAA,IAAI,CAACG,WAAL,GAAmBX,IAAnB,CAb4B,CAe5B;;AACAQ,EAAAA,IAAI,CAACI,KAAL,CAAWC,UAAX,GAAwB,KAAxB;AACAL,EAAAA,IAAI,CAACI,KAAL,CAAWE,gBAAX,GAA8B,MAA9B;AACAN,EAAAA,IAAI,CAACI,KAAL,CAAWG,UAAX,GAAwB,KAAxB,CAlB4B,CAoB5B;;AACAN,EAAAA,QAAQ,CAACO,IAAT,CAAcC,WAAd,CAA0BT,IAA1B,EArB4B,CAuB5B;;AACA,MAAIU,SAAS,GAAGC,MAAM,CAACC,YAAP,EAAhB;AACA,MAAIC,KAAK,GAAGF,MAAM,CAACV,QAAP,CAAgBa,WAAhB,EAAZ;AACAJ,EAAAA,SAAS,CAACK,eAAV;AACAF,EAAAA,KAAK,CAACG,UAAN,CAAiBhB,IAAjB;AACAU,EAAAA,SAAS,CAACO,QAAV,CAAmBJ,KAAnB,EA5B4B,CA8B5B;;AACA,MAAIK,OAAO,GAAG,KAAd;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAGP,MAAM,CAACV,QAAP,CAAgBkB,WAAhB,CAA4B,MAA5B,CAAV;AACD,GAFD,CAEE,OAAOtB,GAAP,EAAY;AACZuB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBxB,GAArB;AACD,GApC2B,CAsC5B;;;AACAa,EAAAA,SAAS,CAACK,eAAV;AACAJ,EAAAA,MAAM,CAACV,QAAP,CAAgBO,IAAhB,CAAqBc,WAArB,CAAiCtB,IAAjC;AAEA,SAAOkB,OAAO,GACVK,OAAO,CAACC,OAAR,EADU,GAEVD,OAAO,CAACE,MAAR,CAAe,IAAI1B,YAAJ,CAAiB,4BAAjB,EAA+C,iBAA/C,CAAf,CAFJ;AAGD","sourcesContent":["/*! clipboard-copy. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* global DOMException */\n\nmodule.exports = clipboardCopy\n\nfunction clipboardCopy (text) {\n  // Use the Async Clipboard API when available. Requires a secure browsing\n  // context (i.e. HTTPS)\n  if (navigator.clipboard) {\n    return navigator.clipboard.writeText(text).catch(function (err) {\n      throw (err !== undefined ? err : new DOMException('The request is not allowed', 'NotAllowedError'))\n    })\n  }\n\n  // ...Otherwise, use document.execCommand() fallback\n\n  // Put the text to copy into a <span>\n  var span = document.createElement('span')\n  span.textContent = text\n\n  // Preserve consecutive spaces and newlines\n  span.style.whiteSpace = 'pre'\n  span.style.webkitUserSelect = 'auto'\n  span.style.userSelect = 'all'\n\n  // Add the <span> to the page\n  document.body.appendChild(span)\n\n  // Make a selection object representing the range of text selected by the user\n  var selection = window.getSelection()\n  var range = window.document.createRange()\n  selection.removeAllRanges()\n  range.selectNode(span)\n  selection.addRange(range)\n\n  // Copy text to the clipboard\n  var success = false\n  try {\n    success = window.document.execCommand('copy')\n  } catch (err) {\n    console.log('error', err)\n  }\n\n  // Cleanup\n  selection.removeAllRanges()\n  window.document.body.removeChild(span)\n\n  return success\n    ? Promise.resolve()\n    : Promise.reject(new DOMException('The request is not allowed', 'NotAllowedError'))\n}\n"]},"metadata":{},"sourceType":"script"}